# -*- coding: utf-8 -*-
"""SalesPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-DGUShs4t1JqzAc5vRgSMOgwLLrgJdpu

Name: Prathmesh Kulkarni

Importing Libraries
"""

import pandas as pd
import os
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

"""Importing Dataset"""

store_sales = pd.read_csv("train.csv")
store_sales.head(10)

store_sales.info()

store_sales = store_sales.drop(['store','item'], axis=1)

store_sales.info()

store_sales['date'] = pd.to_datetime(store_sales['date'])

store_sales['date'] = store_sales['date'].dt.to_period("M")
monthly_sales = store_sales.groupby('date').sum().reset_index()

monthly_sales['date'] = monthly_sales['date'].dt.to_timestamp()

monthly_sales.head(10)

"""Visualization"""

plt.figure(figsize=(15,5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.xlabel("Date")
plt.ylabel("Sales")
plt.title("Montly Customer Sales")
plt.show()

monthly_sales['sales_diff'] = monthly_sales['sales'].diff()
monthly_Sales = monthly_sales.dropna()
monthly_sales.head(10)

plt.figure(figsize=(15,5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.xlabel("Date")
plt.ylabel("Sales")
plt.show()

supervised_data = monthly_sales.drop(['date', 'sales'], axis=1)

for i in range(1,13):
  col_name = 'month' +str(i)
  supervised_data[col_name] = supervised_data['sales_diff'].shift(i)
supervised_data = supervised_data.dropna().reset_index(drop=True)
supervised_data.head(10)

train_data = supervised_data[:-12]
test_data = supervised_data[-12:]
print("Train Dta Shape:",train_data.shape)
print("Test Data Shape:", test_data.shape)

scaler = MinMaxScaler(feature_range=(-1,1))
scaler.fit(train_data)
train_data = scaler.transform(train_data)
test_data = scaler.transform(test_data)

x_train, y_train = train_data[:,1:], train_data[:,0:1]
x_test, y_test = test_data[:,1:], test_data[:,0:1]
y_train = y_train.ravel()
y_test = y_test.ravel()
print("X_train Shape:",x_train.shape)
print("Y_train Shape:",y_train.shape)
print("X_test Shape:",x_test.shape)
print("Y_test Shape:",y_test.shape)

sales_dates = monthly_sales['date'][-12:].reset_index(drop=True)
predict_df = pd.DataFrame(sales_dates)

act_sales = monthly_sales['sales'][-13:].to_list()
print(act_sales)

"""Training Model"""

lr_model = LinearRegression()
lr_model.fit(x_train, y_train)
lr_pre = lr_model.predict(x_test)

lr_pre = lr_pre.reshape(-1,1)
lr_pre_test_set = np.concatenate([lr_pre, x_test], axis=1)
lr_pre_test_set = scaler.inverse_transform(lr_pre_test_set)

result_list = []
for index in range(0, len(lr_pre_test_set)):
  result_list.append(lr_pre_test_set[index][0] + act_sales[index])
lr_pre_series = pd.Series(result_list, name ="Linear Prediction")
predict_df = predict_df.merge(lr_pre_series, left_index=True, right_index =True)

lr_mse = np.sqrt(mean_squared_error(predict_df['Linear Prediction'], monthly_Sales['sales'][-12:]))
lr_mae = mean_absolute_error(predict_df['Linear Prediction'], monthly_sales['sales'][-12:])
lr_r2 = r2_score=(predict_df['Linear Prediction'],  monthly_sales['sales'][-12:])

print("Linear Regression MSE:", lr_mse)
print("Linear Regression MAE:", lr_mae)
print("Linear Regression R2:", lr_r2)

"""Deploying Model"""

plt.figure(figsize=(15,5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.plot(predict_df['date'], predict_df['Linear Prediction'])
plt.title("Costumer Sales Forecast using LR Model")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.legend("Sales")
plt.show()

"""END"""